services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: news_postgres
    environment:
      POSTGRES_DB: news_aggregator
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - news_network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: news_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - news_network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: news_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - news_network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: news_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - news_network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.api-gateway
    container_name: news_api_gateway
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_HOST=postgres
      - REDIS_ADDRESS=redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - ELASTICSEARCH_ADDRESSES=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - news_network
    restart: unless-stopped

  # Data Collector
  data-collector:
    build:
      context: .
      dockerfile: Dockerfile.data-collector
    container_name: news_data_collector
    environment:
      - ENVIRONMENT=production
      - DATABASE_HOST=postgres
      - REDIS_ADDRESS=redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - news_network
    restart: unless-stopped

  # Processor
  processor:
    build:
      context: .
      dockerfile: Dockerfile.processor
    container_name: news_processor
    environment:
      - ENVIRONMENT=production
      - DATABASE_HOST=postgres
      - REDIS_ADDRESS=redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - ELASTICSEARCH_ADDRESSES=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - news_network
    restart: unless-stopped

  # Prometheus (for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: news_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - news_network

  # Grafana (for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: news_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - news_network

  # Nginx (reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: news_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - news_network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  news_network:
    driver: bridge
